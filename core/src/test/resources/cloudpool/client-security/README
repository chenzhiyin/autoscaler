This file describes the necessary steps to generate a self-signed client SSL 
certificate and how to place it in a PKCS12 key store for later use by a Java 
HTTPS client.

''For more details, visit http://bryansaunders.net/blog/2012/07/03/generating-self-signed-certificates-for-mutual-authentication-in-java/.''

The following files need to be generated:
  - {{{client_private.pem}}}: the client's private key.
  - {{{client_certificate.pem}}}: the client's certificate, which the server must trust.
  - {{{client_keystore.p12}}} -- a PKCS12 key store (used to store a set of private key-certificate pairs). 
    - password: "pkcs12password"

  1. Generate the client's private key:
     {{{
openssl genrsa -out client_private.pem 2048
     }}} 
  2. Create the client's self-signed X.509 certificate:
     {{{
openssl req -new -x509 -key client_private.pem -out client_certificate.pem -days 365 -subj "/C=SE/ST=AC/L=Umea/O=Elastisys/OU=TechTeam/CN=Client"
     }}}
  3. Create a PKCS12 key store and import the key and certificate. Set password
     to "pkcs12password". This password becomes the "key password":
     {{{
openssl pkcs12 -export -inkey client_private.pem -in client_certificate.pem -out client_keystore.p12
     }}}
  4. (Optional) This step can be used to import the pkcs12 key store into a 
     Java key store. Set destination keystore password to "jkspassword". The 
     source keystore password is "pkcs12password": 
     {{{
keytool -importkeystore -srckeystore client_keystore.p12 -srcstoretype pkcs12 -destkeystore client_keystore.jks -deststoretype jks
     }}}

Note: when using the PKCS12 key store from within a Java application, you 
need to specify "pkcs12password" as ''keystore password''.

Note: when using the JKS key store from withing a Java application, you need 
to specify "jkspassword" as ''keystore password'' and "pkcs12password" as 
''key [manager] password''.




